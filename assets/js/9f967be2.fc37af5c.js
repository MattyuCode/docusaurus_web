"use strict";(self.webpackChunkdoc_api_whats_app=self.webpackChunkdoc_api_whats_app||[]).push([[211],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>g});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=a.createContext({}),l=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},u=function(e){var n=l(e.components);return a.createElement(c.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=l(t),m=r,g=p["".concat(c,".").concat(m)]||p[m]||d[m]||o;return t?a.createElement(g,s(s({ref:n},u),{},{components:t})):a.createElement(g,s({ref:n},u))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,s=new Array(o);s[0]=m;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i[p]="string"==typeof e?e:r,s[1]=i;for(var l=2;l<o;l++)s[l]=t[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},9640:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var a=t(7462),r=(t(7294),t(3905));const o={sidebar_position:3},s=void 0,i={unversionedId:"API_WhatsApp-webjs/Iniciar_Authenticacion",id:"API_WhatsApp-webjs/Iniciar_Authenticacion",title:"Iniciar_Authenticacion",description:"Crear objecto Client",source:"@site/docs/API_WhatsApp-webjs/Iniciar_Authenticacion.md",sourceDirName:"API_WhatsApp-webjs",slug:"/API_WhatsApp-webjs/Iniciar_Authenticacion",permalink:"/docusaurus_web/docs/API_WhatsApp-webjs/Iniciar_Authenticacion",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/API_WhatsApp-webjs/Iniciar_Authenticacion.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Iniciar_ApiWhatsApp",permalink:"/docusaurus_web/docs/API_WhatsApp-webjs/Iniciar_ApiWhatsApp"},next:{title:"Archivo_html",permalink:"/docusaurus_web/docs/API_WhatsApp-webjs/Archivo_html"}},c={},l=[{value:"Crear objecto Client",id:"crear-objecto-client",level:2},{value:"Crear el metodo Connection",id:"crear-el-metodo-connection",level:2},{value:"Metodo de recibir mensajes",id:"metodo-de-recibir-mensajes",level:2}],u={toc:l};function p(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"crear-objecto-client"},"Crear objecto Client"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"Pegamos el siguiente codigo abajo del app.get()"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Creamos un nuevo Objeto de client para tener una conexi\xf3n de sesi\xf3n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const client = new Client({\n  restartOnAuthFail: true,\n  puppeteer: {\n    headless: true,\n    args: [\n      "--no-sandbox",\n      "--disable-setuid-sandbox",\n      "--disable-dev-shm-usage",\n      "--disable-accelerated-2d-canvas",\n      "--disable-gpu",\n    ],\n  },\n  authStrategy: new LocalAuth(),\n});\n')),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Explicaci\xf3n del codigo anterior"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"'restartOnAuthFail: true': Esto significa que el cliente se reiniciara automaticamente si se produce un error de autenticacion."),(0,r.kt)("li",{parentName:"ol"},"'puppeteer: { }': Las opciones para la instancia de Puppeteer.     "),(0,r.kt)("li",{parentName:"ol"},"'headless: true': Este parametro significa que Puppeteer ejecutara Chrome en modo \"sin cabezal\", es decir, sin una interfaz grafica de usuario visible. "),(0,r.kt)("li",{parentName:"ol"},"'args: ","[... ]","': Este parametro es una matriz de argumentos que se pasaran a Chrome cuando se ejecute. Estos argumentos incluyen opciones para desactivar ciertas caracteristicas de seguridad y de GPU para mejorar el rendimiento. "),(0,r.kt)("li",{parentName:"ol"},'\'authStrategy: new LocalAuth() : Este parametro especifica la estrategia de autenticaci\xf3n que se usara en el cliente. En este caso, se esta utilizando "LocalAuth", que es una estrategia de autenticaci6n incorporada en "puppeteer-cluster".'))),(0,r.kt)("h2",{id:"crear-el-metodo-connection"},"Crear el metodo Connection"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"El Metodo Connection nos ayudar a generar QR y revisar el inicio de session")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'io.on("connection", (socket) => {\n    socket.emit("message", "Conectando....!");\n\n    // Se genera un QR para poder escanearlo en el navegador\n    client.on("qr", (qr) => {\n        console.log("QR received", qr);\n        qrcode.toDataURL(qr, (err, url) => {\n            socket.emit("qr", url);\n            socket.emit("message", "C\xf3digo QR recibido, escanear por favor!");\n        });\n    });\n\n    //Para conectarse al WhatsApp\n    client.on("ready", () => {\n        console.log("Usuario conectado");\n        socket.emit("ready", "WhatsApp est\xe1 listo");\n        socket.emit("message", "Usuario conectado");\n    });\n\n    //Para autenticaci\xf3n del WhatasApp\n    client.on("authenticated", () => {\n        socket.emit("authenticated", "WhatsApp est\xe1 autenticado");\n        socket.emit("message", "WhatsApp est\xe1 autenticado");\n        console.log("AUTENTICADO");\n    });\n\n    //Para el fallo de inicio de session al WhatasApp\n    client.on("auth_failure", (session) => {\n        socket.emit("message", "Error de autenticaci\xf3n, reiniciando...");\n        console.log("ERROR REINICIANDO AUTTENTICACION");\n    });\n\n    //Para desconectarse al  WhatasApp\n    client.on("disconnected", (reason) => {\n        socket.emit("message", "Whatsapp est\xe1 desconectado!");\n        client.destroy();\n        client.initialize();\n    });\n});\n')),(0,r.kt)("h2",{id:"metodo-de-recibir-mensajes"},"Metodo de recibir mensajes"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Este metodo nos ayudara a tener los mensajes automaticos y los configuremos para poder usarlos\ny tambien buscar a los grupos con los IDs para poder usarlos despues")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'client.on("message", (msg) => {\n    if (msg.body === "Hola") {\n        msg.reply("Hola, muy buen d\xeda en que puedo ayudarte");\n        /* El metodo getChats() nos servira para mostrar\n         en el chat si es un grupo y nos dara el id*/\n        client.getChats().then((chats) => {\n            console.log(chats[0]);\n        });\n    } else if (msg.body === "Buenos d\xedas") {\n        msg.reply("Buenos d\xedas en que puedo ayudarte");\n\n    } else if (msg.body === "grupos" || msg.body === "Grupos" || msg.body === "Ver grupos") {\n        /* El metodo getChats() nos servira para generar \n        solamente el ID y nombre de los grupos encontrados*/\n        client.getChats().then((chats) => {\n                const grupos = chats.filter((listaGrupos) => listaGrupos.isGroup);\n                if (grupos.length === 0) {\n                    msg.reply("No hay grupos");\n                } else {\n                    let respuesta = "Aqui estan tus grupos:\\n\\n";\n                    grupos.forEach((grupo, i) => {\n                        respuesta += `ID: ${grupo.id._serialized}\\nName: ${grupo.name}\\n\\n`;\n                    });\n                    respuesta +=\n                        "_Puede usar la identificaci\xf3n del grupo para enviar un mensaje al grupo._";\n                    msg.reply(respuesta);\n                }\n            })\n            .catch((err) => console.error(err));\n    }\n});\n\n')))}p.isMDXComponent=!0}}]);